<===> layer/options.yml
:ignore_for:
  - libsass

<===>
================================================================================
<===> layer/default/input.scss
@import "a.css" layer;

<===> layer/default/output.css
@import "a.css" layer;

<===>
================================================================================
<===> layer/named/input.scss
@import "a.css" layer(b);

<===> layer/named/output.css
@import "a.css" layer(b);

<===>
================================================================================
<===> layer/nested/input.scss
@import "a.css" layer(b.c);

<===> layer/nested/output.css
@import "a.css" layer(b.c);

<===>
================================================================================
<===> layer/nested-deep/input.scss
@import "a.css" layer(b.c.d);

<===> layer/nested-deep/output.css
@import "a.css" layer(b.c.d);

<===>
================================================================================
<===> layer/interpolated/input.scss
$a: "a";
@import "a.css" layer(#{$a});

<===> layer/interpolated/output.css
@import "a.css" layer(a);

<===>
================================================================================
<===> supports/declaration/prop/options.yml
:ignore_for:
  - libsass

<===> supports/declaration/prop/input.scss
@import "a.css" supports(a: b);

<===> supports/declaration/prop/output.css
@import "a.css" supports(a: b);

<===>
================================================================================
<===> supports/declaration/custom_prop/options.yml
:ignore_for:
  - libsass

<===>
================================================================================
<===> supports/declaration/custom_prop/value/input.scss
@import "a.css" supports(--a: b);

<===> supports/declaration/custom_prop/value/output.css
@import "a.css" supports(--a: b);

<===>
================================================================================
<===> supports/declaration/custom_prop/whitespace/input.scss
@import "a.css" supports(--a: );

<===> supports/declaration/custom_prop/whitespace/output.css
@import "a.css" supports(--a: );

<===>
================================================================================
<===> supports/declaration/custom_prop/punctuation/input.scss
@import "a.css" supports(--a: ,);

<===> supports/declaration/custom_prop/punctuation/output.css
@import "a.css" supports(--a: ,);

<===>
================================================================================
<===> supports/condition/options.yml
:ignore_for:
  - libsass

<===> supports/condition/input.scss
@import "a.css" supports((a: b));

<===> supports/condition/output.css
@import "a.css" supports(a: b);

<===>
================================================================================
<===> supports/condition_and/options.yml
:ignore_for:
  - libsass

<===> supports/condition_and/input.scss
@import "a.css" supports((a: b) and (c: d));

<===> supports/condition_and/output.css
@import "a.css" supports((a: b) and (c: d));

<===>
================================================================================
<===> supports/condition_function/options.yml
:ignore_for:
  - libsass

<===> supports/condition_function/input.scss
@import "a.css" supports(a(b));

<===> supports/condition_function/output.css
@import "a.css" supports(a(b));

<===>
================================================================================
<===> supports/condition_negation/options.yml
:ignore_for:
  - libsass

<===> supports/condition_negation/input.scss
@import "a.css" supports(not (a: b));

<===> supports/condition_negation/output.css
@import "a.css" supports(not (a: b));

<===>
================================================================================
<===> media/simple/input.scss
@import url("a.css") print;

<===> media/simple/output.css
@import url("a.css") print;

<===>
================================================================================
<===> media/complex/input.scss
@import url("a.css") handheld and (max-width: 400px);

<===> media/complex/output.css
@import url("a.css") handheld and (max-width: 400px);

<===>
================================================================================
<===> multiple/options.yml
:ignore_for:
  - libsass

<===>
================================================================================
<===> multiple/supports_and_media/input.scss
@import url("a.css") supports(display: flex) handheld and (max-width: 400px);

<===> multiple/supports_and_media/output.css
@import url("a.css") supports(display: flex) handheld and (max-width: 400px);

<===>
================================================================================
<===> multiple/default_layer_and_media/input.scss
@import url("a.css") layer handheld and (max-width: 400px);

<===> multiple/default_layer_and_media/output.css
@import url("a.css") layer handheld and (max-width: 400px);

<===>
================================================================================
<===> multiple/named_layer_and_media/input.scss
@import url("a.css") layer(b) handheld and (max-width: 400px);

<===> multiple/named_layer_and_media/output.css
@import url("a.css") layer(b) handheld and (max-width: 400px);

<===>
================================================================================
<===> multiple/default_layer_and_supports/input.scss
@import url("a.css") layer supports(display: flex);

<===> multiple/default_layer_and_supports/output.css
@import url("a.css") layer supports(display: flex);

<===>
================================================================================
<===> multiple/named_layer_and_supports/input.scss
@import url("a.css") layer(b) supports(display: flex);

<===> multiple/named_layer_and_supports/output.css
@import url("a.css") layer(b) supports(display: flex);

<===>
================================================================================
<===> multiple/default_layer_and_supports_and_media/input.scss
@import url("a.css") layer supports(display: flex) handheld and (max-width: 400px);

<===> multiple/default_layer_and_supports_and_media/output.css
@import url("a.css") layer supports(display: flex) handheld and (max-width: 400px);

<===>
================================================================================
<===> multiple/named_layer_and_supports_and_media/input.scss
@import url("a.css") layer(b) supports(display: flex) handheld and (max-width: 400px);

<===> multiple/named_layer_and_supports_and_media/output.css
@import url("a.css") layer(b) supports(display: flex) handheld and (max-width: 400px);

<===>
================================================================================
<===> multiple/media_and_supports/input.scss
@import url("a.css") (max-width: 400px) supports(display: flex);

<===> multiple/media_and_supports/output.css
@import url("a.css") (max-width: 400px) supports(display: flex);

<===>
================================================================================
<===> multiple/media_and_layer/input.scss
@import url("a.css") (max-width: 400px) layer(b);

<===> multiple/media_and_layer/output.css
@import url("a.css") (max-width: 400px) layer(b);

<===>
================================================================================
<===> multiple/supports_and_layer/input.scss
@import url("a.css") supports(display: flex) layer(b);

<===> multiple/supports_and_layer/output.css
@import url("a.css") supports(display: flex) layer(b);

<===>
================================================================================
<===> error/supports/declaration/custom_prop/empty/options.yml
:ignore_for:
  - libsass

<===> error/supports/declaration/custom_prop/empty/input.scss
@import url("a.css") supports(--a:);

<===> error/supports/declaration/custom_prop/empty/error
Error: Expected token.
  ,
1 | @import url("a.css") supports(--a:);
  |                                   ^
  '
  input.scss 1:35  root stylesheet
