<===> multiple/input.scss
.foo {
  /* Foo Bar */
  /* Baz Bang */ }

<===> multiple/output.css
.foo {
  /* Foo Bar */
  /* Baz Bang */
}

<===>
================================================================================
<===> multiple_stars/input.scss
a /***/ b {x: y}
a /****/ b {x: y}
a /* **/ b {x: y}
a /** */ b {x: y}

<===> multiple_stars/output.css
a b {
  x: y;
}
a b {
  x: y;
}
a b {
  x: y;
}
a b {
  x: y;
}

<===>
================================================================================
<===> weird_indentation/input.scss
.foo {
    /* Foo
 Bar
Baz */
  a: b; }

<===> weird_indentation/output.css
.foo {
  /* Foo
   Bar
  Baz */
  a: b;
}

<===> weird_indentation/output-libsass.css
.foo {
  /* Foo
 Bar
Baz */
  a: b;
}

<===>
================================================================================
<===> converts_newlines/README.md
Everything CSS considers a newline (including `\r\n`, `\r`, and `\f`) should be
converted to a newline in a comment's contents.

Note that we don't test CR LF because the spec runner normalizes those itself,
so we can't usefully verify that they're converted. Individual implementations
should include their own tests for CR LF newlines.

<===>
================================================================================
<===> converts_newlines/scss/cr/input.scss
/* foo * bar */

<===> converts_newlines/scss/cr/output.css
/* foo
 * bar */

<===>
================================================================================
<===> converts_newlines/scss/ff/input.scss
/* foo * bar */

<===> converts_newlines/scss/ff/output.css
/* foo
 * bar */

<===>
================================================================================
<===> converts_newlines/sass/cr/input.sass
/*
  foo  bar

<===> converts_newlines/sass/cr/output.css
/* foo
 * bar */

<===> converts_newlines/sass/cr/output-libsass.css
/*
  foo
  bar */

<===>
================================================================================
<===> converts_newlines/sass/ff/input.sass
/*
  foo  bar

<===> converts_newlines/sass/ff/output.css
/* foo
 * bar */

<===> converts_newlines/sass/ff/output-libsass.css
/*
  foo
  bar */


<===>
================================================================================
<===> inline/silent/scss/input.scss
a {
  b: c // d
}

<===> inline/silent/scss/output.css
a {
  b: c;
}

<===>
================================================================================
<===> inline/silent/sass/input.sass
a
  b: c // d

<===> inline/silent/sass/output.css
a {
  b: c;
}

<===>
================================================================================
<===> inline/loud/scss/input.scss
a {
  b: c /* d */ e;
}

<===> inline/loud/scss/output.css
a {
  b: c e;
}

<===>
================================================================================
<===> inline/loud/sass/input.sass
a
  b: c /* d */ e

<===> inline/loud/sass/output.css
a {
  b: c e;
}

<===>
================================================================================
<===> error/loud/unterminated/scss/input.scss
a {
  b: c /* d
}

<===> error/loud/unterminated/scss/error
Error: expected more input.
  ,
3 | }
  |  ^
  '
  input.scss 3:2  root stylesheet

<===> error/loud/unterminated/scss/error-libsass
Error: Invalid CSS after "  b: c /": expected expression (e.g. 1px, bold), was "* d"
        on line 2:8 of input.scss
>>   b: c /* d

   -------^

<===>
================================================================================
<===> error/loud/unterminated/sass/input.sass
a
  b: c /* d

<===> error/loud/unterminated/sass/error
Error: expected */.
  ,
2 |   b: c /* d
  |            ^
  '
  input.sass 2:12  root stylesheet

<===> error/loud/unterminated/sass/error-libsass
Error: Invalid CSS after "  b: c /": expected expression (e.g. 1px, bold), was "* d; }"
        on line 2:8 of input.sass
>>   b: c /* d; }

   -------^

<===>
================================================================================
<===> error/loud/multi_line/sass/input.sass
a
  b: c /* d
          e */ f

<===> error/loud/multi_line/sass/error
Error: expected */.
  ,
2 |   b: c /* d
  |            ^
  '
  input.sass 2:12  root stylesheet

<===> error/loud/multi_line/sass/error-libsass
Error: Invalid CSS after "...    e */ f {} }": expected selector or at-rule, was "}"
        on line 3:22 of input.sass
>>           e */ f {} } }

   ---------------------^

<===>
================================================================================
<===> error/loud/interpolation/unterminated/input.scss
/* #{broken */

<===> error/loud/interpolation/unterminated/error
Error: Expected expression.
  ,
1 | /* #{broken */
  |               ^
  '
  input.scss 1:15  root stylesheet

<===> error/loud/interpolation/unterminated/error-libsass
Error: unterminated interpolant inside string constant /* #{broken */
        on line 1:1 of input.scss
>> /* #{broken */

   ^

<===>
================================================================================
<===> error/loud/interpolation/failure/input.scss
/* #{$undefined} */

<===> error/loud/interpolation/failure/error
Error: Undefined variable.
  ,
1 | /* #{$undefined} */
  |      ^^^^^^^^^^
  '
  input.scss 1:6  root stylesheet

<===> error/loud/interpolation/failure/error-libsass
Error: Undefined variable: "$undefined".
        on line 1:20 of input.scss
>> /* #{$undefined} */

   -------------------^
