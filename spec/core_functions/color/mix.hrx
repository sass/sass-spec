<===> unweighted/min_and_max/input.scss
@use "sass:color";
// Each channel becomes the average of 255 and 0, which is 128 = 0xAA.
a {b: color.mix(#ff00ff, #00ff00)}

<===> unweighted/min_and_max/output.css
a {
  b: gray;
}

<===>
================================================================================
<===> unweighted/identical/input.scss
@use "sass:color";
// If two channels have the same values, they should be the same in the output.
a {b: color.mix(#123456, #123456)}

<===> unweighted/identical/output.css
a {
  b: #123456;
}

<===>
================================================================================
<===> unweighted/average/input.scss
@use "sass:color";
// All channels should be averaged across the two colors.
a {b: color.mix(#91e16f, #0144bf)}

<===> unweighted/average/output.css
a {
  b: #499397;
}

<===>
================================================================================
<===> explicit_weight/even/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 50%)}

<===> explicit_weight/even/output.css
a {
  b: #499397;
}

<===>
================================================================================
<===> explicit_weight/first/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 100%)}

<===> explicit_weight/first/output.css
a {
  b: #91e16f;
}

<===>
================================================================================
<===> explicit_weight/last/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 0%)}

<===> explicit_weight/last/output.css
a {
  b: #0144bf;
}

<===>
================================================================================
<===> explicit_weight/firstwards/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 92%)}

<===> explicit_weight/firstwards/output.css
a {
  b: #85d475;
}

<===>
================================================================================
<===> explicit_weight/lastwards/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 43%)}

<===> explicit_weight/lastwards/output.css
a {
  b: #3f889d;
}

<===>
================================================================================
<===> alpha/even/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.3), rgba(#0144bf, 0.3))}

<===> alpha/even/output.css
a {
  b: rgba(73, 147, 151, 0.3);
}

<===>
================================================================================
<===> alpha/first/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, transparent)}

<===> alpha/first/output.css
a {
  b: rgba(145, 225, 111, 0.5);
}

<===>
================================================================================
<===> alpha/last/input.scss
@use "sass:color";
a {b: color.mix(transparent, #0144bf)}

<===> alpha/last/output.css
a {
  b: rgba(1, 68, 191, 0.5);
}

<===>
================================================================================
<===> alpha/firstwards/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.8), rgba(#0144bf, 0.3))}

<===> alpha/firstwards/output.css
a {
  b: rgba(109, 186, 131, 0.55);
}

<===>
================================================================================
<===> alpha/lastwards/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.4), rgba(#0144bf, 0.9))}

<===> alpha/lastwards/output.css
a {
  b: rgba(37, 107, 171, 0.65);
}

<===>
================================================================================
<===> both_weights/transparent/first/input.scss
@use "sass:color";
a {b: color.mix(transparent, #0144bf, 70%)}

<===> both_weights/transparent/first/output.css
a {
  b: rgba(1, 68, 191, 0.3);
}

<===>
================================================================================
<===> both_weights/transparent/last/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, transparent, 70%)}

<===> both_weights/transparent/last/output.css
a {
  b: rgba(145, 225, 111, 0.7);
}

<===>
================================================================================
<===> both_weights/weighted/first/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.2), rgba(#0144bf, 0.7), 100%)}

<===> both_weights/weighted/first/output.css
a {
  b: rgba(145, 225, 111, 0.2);
}

<===>
================================================================================
<===> both_weights/weighted/last/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.2), rgba(#0144bf, 0.7), 0%)}

<===> both_weights/weighted/last/output.css
a {
  b: rgba(1, 68, 191, 0.7);
}

<===>
================================================================================
<===> both_weights/mixed/firstwards/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.8), rgba(#0144bf, 0.3), 63%)}

<===> both_weights/mixed/firstwards/output.css
a {
  b: rgba(121, 199, 124, 0.615);
}

<===>
================================================================================
<===> both_weights/mixed/lastwards/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.2), rgba(#0144bf, 0.7), 42%)}

<===> both_weights/mixed/lastwards/output.css
a {
  b: rgba(29, 99, 175, 0.49);
}

<===>
================================================================================
<===> both_weights/contradiction/input.scss
@use "sass:color";
// When we weight entirely towards a transparent color, the formula for
// computing the combined alpha would divide by zero, so we just return
// transparent as a special case.
a {b: color.mix(transparent, #0144bf, 100%)}

<===> both_weights/contradiction/output.css
a {
  b: rgba(0, 0, 0, 0);
}

<===>
================================================================================
<===> named/input.scss
@use "sass:color";
a {b: color.mix($color1: #91e16f, $color2: #0144bf, $weight: 92%)}

<===> named/output.css
a {
  b: #85d475;
}

<===>
================================================================================
<===> units/weight/unitless/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 50)}

<===> units/weight/unitless/output.css
a {
  b: #499397;
}

<===> units/weight/unitless/warning
DEPRECATION WARNING: $weight: Passing a number without unit % (50) is deprecated.

To preserve current behavior: $weight * 1%

More info: https://sass-lang.com/d/function-units

  ,
2 | a {b: color.mix(#91e16f, #0144bf, 50)}
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
    input.scss 2:7  root stylesheet

<===>
================================================================================
<===> units/weight/unknown/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, #0144bf, 50px)}

<===> units/weight/unknown/output.css
a {
  b: #499397;
}

<===> units/weight/unknown/warning
DEPRECATION WARNING: $weight: Passing a number without unit % (50px) is deprecated.

To preserve current behavior: calc($weight / 1px * 1%)

More info: https://sass-lang.com/d/function-units

  ,
2 | a {b: color.mix(#91e16f, #0144bf, 50px)}
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
    input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/too_many_args/input.scss
@use "sass:color";
a {b: color.mix(red, blue, 100, 1)}

<===> error/too_many_args/error
Error: Only 3 arguments allowed, but 4 were passed.
  ,--> input.scss
2 | a {b: color.mix(red, blue, 100, 1)}
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invocation
  '
  ,--> sass:color
1 | @function mix($color1, $color2, $weight: 50%) {
  |           =================================== declaration
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/too_few_args/input.scss
@use "sass:color";
a {b: color.mix(red)}

<===> error/too_few_args/error
Error: Missing argument $color2.
  ,--> input.scss
2 | a {b: color.mix(red)}
  |       ^^^^^^^^^^^^^^ invocation
  '
  ,--> sass:color
1 | @function mix($color1, $color2, $weight: 50%) {
  |           =================================== declaration
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/type/color1/input.scss
@use "sass:color";
a {b: color.mix(1, blue)}

<===> error/type/color1/error
Error: $color1: 1 is not a color.
  ,
2 | a {b: color.mix(1, blue)}
  |       ^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/type/color2/input.scss
@use "sass:color";
a {b: color.mix(red, 1)}

<===> error/type/color2/error
Error: $color2: 1 is not a color.
  ,
2 | a {b: color.mix(red, 1)}
  |       ^^^^^^^^^^^^^^^^^
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/type/weight/input.scss
@use "sass:color";
a {b: color.mix(red, blue, green)}

<===> error/type/weight/error
Error: $weight: green is not a number.
  ,
2 | a {b: color.mix(red, blue, green)}
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/bounds/too_low/input.scss
@use "sass:color";
a {b: color.mix(red, blue, -0.001%)}

<===> error/bounds/too_low/error
Error: $weight: Expected -0.001% to be within 0% and 100%.
  ,
2 | a {b: color.mix(red, blue, -0.001%)}
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/bounds/too_high/input.scss
@use "sass:color";
a {b: color.mix(red, blue, 100.001%)}

<===> error/bounds/too_high/error
Error: $weight: Expected 100.001% to be within 0% and 100%.
  ,
2 | a {b: color.mix(red, blue, 100.001%)}
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 2:7  root stylesheet
