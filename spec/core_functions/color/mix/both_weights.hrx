<===> transparent/first/input.scss
@use "sass:color";
a {b: color.mix(transparent, #0144bf, 70%)}

<===> transparent/first/output.css
a {
  b: rgba(1, 68, 191, 0.3);
}

<===>
================================================================================
<===> transparent/last/input.scss
@use "sass:color";
a {b: color.mix(#91e16f, transparent, 70%)}

<===> transparent/last/output.css
a {
  b: rgba(145, 225, 111, 0.7);
}

<===>
================================================================================
<===> weighted/first/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.2), rgba(#0144bf, 0.7), 100%)}

<===> weighted/first/output.css
a {
  b: rgba(145, 225, 111, 0.2);
}

<===>
================================================================================
<===> weighted/last/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.2), rgba(#0144bf, 0.7), 0%)}

<===> weighted/last/output.css
a {
  b: rgba(1, 68, 191, 0.7);
}

<===>
================================================================================
<===> mixed/firstwards/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.8), rgba(#0144bf, 0.3), 63%)}

<===> mixed/firstwards/output.css
a {
  b: rgba(121.4247787611, 199.296460177, 124.0973451327, 0.615);
}

<===>
================================================================================
<===> mixed/lastwards/input.scss
@use "sass:color";
a {b: color.mix(rgba(#91e16f, 0.2), rgba(#0144bf, 0.7), 42%)}

<===> mixed/lastwards/output.css
a {
  b: rgba(29, 98.5277777778, 175.4444444444, 0.49);
}

<===>
================================================================================
<===> contradiction/input.scss
@use "sass:color";
// When we weight entirely towards a transparent color, the formula for
// computing the combined alpha would divide by zero, so we just return
// transparent as a special case.
a {b: color.mix(transparent, #0144bf, 100%)}

<===> contradiction/output.css
a {
  b: rgba(0, 0, 0, 0);
}
