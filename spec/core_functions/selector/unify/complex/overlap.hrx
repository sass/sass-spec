<===> class/input.scss
@use "sass:selector";
// Because neither compound selector containing `.c` is a superselector of the
// other, they aren't unified.
a {b: selector.unify(".c.s1-1 .s1-2", ".c.s2-1 .s2-2")}

<===> class/output.css
a {
  b: .c.s1-1 .c.s2-1 .s1-2.s2-2, .c.s2-1 .c.s1-1 .s1-2.s2-2;
}

<===>
================================================================================
<===> id/no_unification/input.scss
@use "sass:selector";
a {b: selector.unify("#s1-1.c .s1-2", "#s2-1.c .s2-2")}

<===> id/no_unification/output.css
a {
  b: #s1-1.c #s2-1.c .s1-2.s2-2, #s2-1.c #s1-1.c .s1-2.s2-2;
}

<===>
================================================================================
<===> id/forced_unification/input.scss
@use "sass:selector";
// Even though neither selector containing `#c` is a superselector of the other,
// they're still unified because the selector can't meainingfully contain two
// instances of `#c`.
a {b: selector.unify("#c.s1-1 .s1-2", "#c.s2-1 .s2-2")}

<===> id/forced_unification/output.css
a {
  b: #c.s2-1.s1-1 .s1-2.s2-2;
}

<===>
================================================================================
<===> pseudo_element/no_unification/input.scss
@use "sass:selector";
a {b: selector.unify("::s1-1.c .s1-2", "::s2-1.c .s2-2")}

<===> pseudo_element/no_unification/output.css
a {
  b: ::s1-1.c ::s2-1.c .s1-2.s2-2, ::s2-1.c ::s1-1.c .s1-2.s2-2;
}

<===>
================================================================================
<===> pseudo_element/forced_unification/input.scss
@use "sass:selector";
a {b: selector.unify(".s1-1::c .s1-2", ".s2-1::c .s2-2")}

<===> pseudo_element/forced_unification/output.css
a {
  b: .s2-1.s1-1::c .s1-2.s2-2;
}
