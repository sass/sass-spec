<===> README.md
Because `:is()` is extremely flexible, there are more cases where it is
technically a superselector or subselector than those represented here. However,
universally supporting these would require the equivalent of fully resolving the
`:is()` declaration in the same manner as `@extend` which would add way too
much implementation complexity for such a marginal edge case.

In particular, we don't require that superselectors be detected when the
subselector contains `:is()` and the superselector does not (even though
`c` is semantically a superselector of `:is(c)`).

Most changes here should also be reflected in `matches.hrx`.

<===>
================================================================================
<===> simple/equal/options.yml
:todo:
  - sass/libsass#3154

<===> simple/equal/input.scss
a {b: is-superselector(":is(c)", "c")}

<===> simple/equal/output.css
a {
  b: true;
}

<===>
================================================================================
<===> simple/unequal/input.scss
a {b: is-superselector(":is(c)", "d")}

<===> simple/unequal/output.css
a {
  b: false;
}

<===>
================================================================================
<===> compound/superset/options.yml
:todo:
  - sass/libsass#3154

<===> compound/superset/input.scss
a {b: is-superselector(":is(c.e)", "c.d.e")}

<===> compound/superset/output.css
a {
  b: true;
}

<===>
================================================================================
<===> compound/subset/input.scss
a {b: is-superselector(":is(c.d.e)", "c e")}

<===> compound/subset/output.css
a {
  b: false;
}

<===>
================================================================================
<===> complex/superset/options.yml
---
:todo:
- sass/libsass#2972

<===> complex/superset/input.scss
a {b: is-superselector(":is(c e)", "c d e")}

<===> complex/superset/output.css
a {
  b: true;
}

<===>
================================================================================
<===> complex/subset/input.scss
a {b: is-superselector(":is(c d e)", "c e")}

<===> complex/subset/output.css
a {
  b: false;
}

<===>
================================================================================
<===> list/superset/options.yml
---
:todo:
- sass/libsass#2972

<===> list/superset/input.scss
a {b: is-superselector(":is(c d, e f, g h)", "c d, e f")}

<===> list/superset/output.css
a {
  b: true;
}

<===>
================================================================================
<===> list/subset/input.scss
a {b: is-superselector(":is(c d, e f)", "c d, e f, g h")}

<===> list/subset/output.css
a {
  b: false;
}

<===>
================================================================================
<===> both/README.md
We do *allow* `:is()` in the subselector, we just require there to be a
corresponding `:is()` in the superselector. Then we do a superselector
check on those two selectors in isolation.

<===>
================================================================================
<===> both/superset/options.yml
:todo:
  - sass/libsass#3154

<===> both/superset/input.scss
a {b: is-superselector(":is(c d, e f, g h)", ":is(c d.i, e j f)")}

<===> both/superset/output.css
a {
  b: true;
}

<===>
================================================================================
<===> both/subset/input.scss
a {b: is-superselector(":is(c d.i, e j f)", ":is(c d, e f, g h)")}

<===> both/subset/output.css
a {
  b: false;
}

<===>
================================================================================
<===> prefix/superset/options.yml
---
:todo:
- sass/libsass#2972

<===> prefix/superset/input.scss
a {b: is-superselector(":-pfx-is(c d, e f, g h)", "c d.i, e j f")}

<===> prefix/superset/output.css
a {
  b: true;
}

<===>
================================================================================
<===> prefix/subset/input.scss
a {b: is-superselector(":-pfx-is(c d.i, e j f)", "c d, e f, g h")}

<===> prefix/subset/output.css
a {
  b: false;
}

<===>
================================================================================
<===> not_superselector_of/README.md
`:is()` isn't considered a superselector of other selectors with the same
semantics, because in practice they match different browsers.

<===>
================================================================================
<===> not_superselector_of/any/input.scss
a {b: is-superselector(":is(c, d)", ":any(c, d)")}

<===> not_superselector_of/any/output.css
a {
  b: false;
}

<===>
================================================================================
<===> not_superselector_of/prefixed/input.scss
a {b: is-superselector(":is(c, d)", ":-pfx-is(c, d)")}

<===> not_superselector_of/prefixed/output.css
a {
  b: false;
}
