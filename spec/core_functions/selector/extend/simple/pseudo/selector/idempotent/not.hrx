<===> README.md
Unlike other pseudo-selectors, when extending into `:not()` we add additional
`:not()`s to the compound selector, rather than adding selectors within the
original `:not()`. We're able to do this because (uniquely among selector
pseudos) `:not(X, Y)` is equivalent to `:not(X):not(Y)`. We *want* to do this
because older browsers only support a compound selector within `:not()` rather
than a selector list.

<===>
================================================================================
<===> simple/input.scss
a {b: selector-extend(":not(.c)", ".c", ".d")}

<===> simple/output.css
a {
  b: :not(.c):not(.d);
}

<===>
================================================================================
<===> list/input.scss
a {b: selector-extend(":not(.c)", ".c", ".d, .e")}

<===> list/output.css
a {
  b: :not(.c):not(.d):not(.e);
}

<===>
================================================================================
<===> complex/input.scss
a {b: selector-extend(":not(.c .d)", ".d", ".e .f")}

<===> complex/output.css
a {
  b: :not(.c .d):not(.c .e .f):not(.e .c .f);
}

<===>
================================================================================
<===> component/input.scss
a {b: selector-extend(":not(.c.d)", ".c", ".e")}

<===> component/output.css
a {
  b: :not(.c.d):not(.d.e);
}

<===>
================================================================================
<===> list_in_not/input.scss
// If the original :not() already contains a selector list, we add new selectors
// to that list because there's no risk of breaking additional browsers.
a {b: selector-extend(":not(.c, .d)", ".c", ".e")}

<===> list_in_not/output.css
a {
  b: :not(.c, .e, .d);
}

<===>
================================================================================
<===> is/list/input.scss
a {b: selector-extend(":not(.c)", ".c", ":is(.d, .e)")}

<===> is/list/output.css
a {
  b: :not(.c):not(.d):not(.e);
}

<===>
================================================================================
<===> is/list_of_complex/input.scss
a {b: selector-extend(":not(.c)", ".c", ":is(.d .e, .f .g)")}

<===> is/list_of_complex/output.css
a {
  b: :not(.c):not(.d .e):not(.f .g);
}

<===>
================================================================================
<===> is/in_compound/input.scss
a {b: selector-extend(":not(.c)", ".c", ".d:is(.e, .f)")}

<===> is/in_compound/output.css
a {
  b: :not(.c):not(.d:is(.e, .f));
}

<===>
================================================================================
<===> matches/list/input.scss
a {b: selector-extend(":not(.c)", ".c", ":matches(.d, .e)")}

<===> matches/list/output.css
a {
  b: :not(.c):not(.d):not(.e);
}

<===>
================================================================================
<===> matches/list_of_complex/input.scss
a {b: selector-extend(":not(.c)", ".c", ":matches(.d .e, .f .g)")}

<===> matches/list_of_complex/output.css
a {
  b: :not(.c):not(.d .e):not(.f .g);
}

<===>
================================================================================
<===> matches/in_compound/input.scss
a {b: selector-extend(":not(.c)", ".c", ".d:matches(.e, .f)")}

<===> matches/in_compound/output.css
a {
  b: :not(.c):not(.d:matches(.e, .f));
}

<===>
================================================================================
<===> where/list/input.scss
a {b: selector-extend(":not(.c)", ".c", ":where(.d, .e)")}

<===> where/list/output.css
a {
  b: :not(.c):not(.d):not(.e);
}

<===>
================================================================================
<===> where/list_of_complex/input.scss
a {b: selector-extend(":not(.c)", ".c", ":where(.d .e, .f .g)")}

<===> where/list_of_complex/output.css
a {
  b: :not(.c):not(.d .e):not(.f .g);
}

<===>
================================================================================
<===> where/in_compound/input.scss
a {b: selector-extend(":not(.c)", ".c", ".d:where(.e, .f)")}

<===> where/in_compound/output.css
a {
  b: :not(.c):not(.d:where(.e, .f));
}

<===>
================================================================================
<===> not_in_extender/input.scss
// Ideally, this should emit `.d, :not(.c)`, but that would be the only
// situation where extending a pseudo selector could produce a full-on selector
// list. For the sake of simplicity of the `@extend` algorithm, we just ignore
// nested `:not()`s instead.
a {b: selector-extend(":not(.c)", ".c", ":not(.d)")}

<===> not_in_extender/output.css
a {
  b: :not(.c);
}
