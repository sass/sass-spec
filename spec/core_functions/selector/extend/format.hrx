<===> input/non_string/README.md
These specs verify that all the arguments to `selector-extend()` can take the
parsed selector format, and that the function returns a selector in that format.
The full set of possible input formats is tested with `selector-parse()`; this
spec just verifies one example for each parameter.

<===>
================================================================================
<===> input/non_string/selector/input.scss
a {b: selector-extend((c, d c), "c", "e")}

<===> input/non_string/selector/output.css
a {
  b: c, e, d c;
}

<===>
================================================================================
<===> input/non_string/extendee/input.scss
a {b: selector-extend("c.d", (c, ".d"), ".e")}

<===> input/non_string/extendee/output.css
a {
  b: c.d, .e;
}

<===>
================================================================================
<===> input/non_string/extender/input.scss
a {b: selector-extend("c", "c", (d, e f))}

<===> input/non_string/extender/output.css
a {
  b: c, d, e f;
}

<===>
================================================================================
<===> input/multiple_extendees/compound/input.scss
a {b: selector-extend("c.d", "c.d", ".e")}

<===> input/multiple_extendees/compound/output.css
a {
  b: c.d, .e;
}

<===>
================================================================================
<===> input/multiple_extendees/list/input.scss
a {b: selector-extend("c.d", "c, .d", ".e")}

<===> input/multiple_extendees/list/output.css
a {
  b: c.d, .e;
}

<===>
================================================================================
<===> input/multiple_extendees/list_of_compound/input.scss
a {b: selector-extend("c.d.e.f", "c.d, .e.f", ".g")}

<===> input/multiple_extendees/list_of_compound/output.css
a {
  b: c.d.e.f, .g;
}

<===>
================================================================================
<===> output/input.scss
$result: selector-extend("c d, e f", "g", "g");
a {
  result: $result;
  structure: $result == ("c" "d", "e" "f");
}

<===> output/output.css
a {
  result: c d, e f;
  structure: true;
}
