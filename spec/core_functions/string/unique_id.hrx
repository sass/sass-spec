<===> is_unique/input.scss
// As the name suggests, every call to unique-id() should return a different
// value.
$ids: ();
@for $i from 1 to 1000 {
  $id: unique-id();
  @if map-has-key($ids, $id) {
    @error "#{$id} generated more than once";
  }

  $ids: map-merge($ids, ($id: null));
}

<===> is_unique/output.css

<===>
================================================================================
<===> is_identifier/input.scss
// Every call to unique-id() should return a valid CSS identifier. We can't test
// this directly, so we make sure it can parse as a class selector with
// selector-parse().
@for $i from 1 to 1000 {
  $_: selector-parse(".#{unique-id()}");
}

<===> is_identifier/output.css

<===>
================================================================================
<===> error/too_many_args/input.scss
a {b: unique-id(c)}

<===> error/too_many_args/error
Error: Only 0 arguments allowed, but 1 was passed.
  ,--> input.scss
1 | a {b: unique-id(c)}
  |       ^^^^^^^^^^^^ invocation
  '
  ,--> sass:string
1 | @function unique-id() {
  |           =========== declaration
  '
  input.scss 1:7  root stylesheet

<===> error/too_many_args/error-libsass
Error: wrong number of arguments (1 for 0) for `unique-id'
        on line 1:7 of input.scss
>> a {b: unique-id(c)}

   ------^
