<===>
================================================================================
<===> passes-content/input.scss
@use "sass:meta";

@mixin foo {
    @content;
}

a {
    @include meta.apply(meta.get-mixin("foo")) {
        b: red;
    }
}

<===> passes-content/output.css
a {
  b: red;
}

<===>
================================================================================
<===> passes-empty-content/input.scss
@use "sass:meta";

@mixin foo {
    @content;
}

a {
    @include meta.apply(meta.get-mixin("foo")) {}
}

<===> passes-empty-content/output.css
<===>
================================================================================
<===> denies-content/user-defined/input.scss
@use "sass:meta";
@mixin foo {}

a {
    @include meta.apply(meta.get-mixin("foo")) {}
}

<===> denies-content/user-defined/error
Error: Mixin doesn't accept a content block.
    ,
2   | @mixin foo {}
    |        === declaration
... |
5   |     @include meta.apply(meta.get-mixin("foo")) {}
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invocation
    '
  input.scss 5:5  root stylesheet

<===>
================================================================================
<===> denies-content/builtin/input.scss
@use "sass:meta";

a {
    @include meta.apply(meta.get-mixin(load-css, meta), "foo") {
        a: b;
    }
}

<===> denies-content/builtin/error
Error: Mixin doesn't accept a content block.
  ,
4 |     @include meta.apply(meta.get-mixin(load-css, meta), "foo") {
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 4:5  root stylesheet

<===>
================================================================================
<===> scope/redeclare-vars/input.scss
@use "sass:meta";
@mixin foo($a: a) {
    $b: b;
    @content;
    a: $a;
    b: $b;
}

$c: c;

a {
    $d: d;
    @include meta.apply(meta.get-mixin("foo")) {
        $a: x;
        $b: x;
        $c: x;
        $d: x;
    }
    c: $c;
    d: $d;
}

<===> scope/redeclare-vars/output.css
a {
  a: a;
  b: b;
  c: c;
  d: x;
}

<===>
================================================================================
<===> scope/redeclare/using/input.scss
@use "sass:meta";
@mixin foo($a: x) {
    @content(a);
}

$a: y;

a {
    $a: z;
    @include meta.apply(meta.get-mixin("foo")) using ($a) {
        a: $a;
        $a: a;
    }
    b: $a;
}

<===> scope/redeclare/using/output.css
a {
  a: a;
  b: z;
}

<===>
================================================================================
<===> scope/fall-through/input.scss
@use "sass:meta";
$b: x;

@mixin foo {
    @content(x);
    b: $b;
}

@mixin bar {
    $b: a;
    @include meta.apply(meta.get-mixin(foo)) using ($a) {
        @content($a);
    }
}

@mixin baz {
    $b: b;
    @include meta.apply(meta.get-mixin(bar)) using ($a) {
        @content($a);
    }
}

a {
    $b: c;
    @include meta.apply(meta.get-mixin(baz)) using ($a) {
        a: $a;
    }
}

<===> scope/fall-through/output.css
a {
  a: x;
  b: x;
}
