<===> passes_content/input.scss
@use "sass:meta";

@mixin a {
  b {
    @content;
  }
}

a {
  @include meta.apply(meta.get-mixin("a")) {
    b: red;
  }
}

<===> passes_content/output.css
a b {
  b: red;
}

<===>
================================================================================
<===> passes_empty_content/input.scss
@use "sass:meta";

@mixin a {
  @content;
}

a {
  @include meta.apply(meta.get-mixin("a")) {}
}

<===> passes_empty_content/output.css

<===>
================================================================================
<===> denies_content/user_defined/input.scss
@use "sass:meta";
@mixin a {}

a {
  @include meta.apply(meta.get-mixin("a")) {}
}

<===> denies_content/user_defined/error
Error: Mixin doesn't accept a content block.
    ,
2   | @mixin a {}
    |        = declaration
... |
5   |   @include meta.apply(meta.get-mixin("a")) {}
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invocation
    '
  input.scss 5:3  root stylesheet

<===>
================================================================================
<===> denies_content/builtin/input.scss
@use "sass:meta";

a {
  @include meta.apply(meta.get-mixin(load-css, meta), "a") {
    a: b;
  }
}

<===> denies_content/builtin/error
Error: Mixin doesn't accept a content block.
  ,--> input.scss
4 |   @include meta.apply(meta.get-mixin(load-css, meta), "a") {
  |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invocation
  '
  ,--> sass:meta
1 | @mixin load-css($url, $with: null) {
  |        =========================== declaration
  '
  input.scss 4:3  root stylesheet

<===>
================================================================================
<===> scope/redeclare/vars/input.scss
@use "sass:meta";
@mixin a($a: a) {
  $b: b;
  @content;
  a: $a;
  b: $b;
}

$c: c;

a {
  $d: d;
  @include meta.apply(meta.get-mixin("a")) {
    $a: x;
    $b: x;
    $c: x;
    $d: x;
  }
  c: $c;
  d: $d;
}

<===> scope/redeclare/vars/output.css
a {
  a: a;
  b: b;
  c: c;
  d: x;
}

<===>
================================================================================
<===> scope/redeclare/using/input.scss
@use "sass:meta";
@mixin a($a: x) {
  @content(a);
}

$a: y;

a {
  $a: z;
  @include meta.apply(meta.get-mixin("a")) using ($a) {
    a: $a;
    $a: a;
  }
  b: $a;
}

<===> scope/redeclare/using/output.css
a {
  a: a;
  b: z;
}

<===>
================================================================================
<===> scope/fall_through/input.scss
@use "sass:meta";
$b: x;

@mixin a {
  @content(x);
  b: $b;
}

@mixin b {
  $b: a;
  @include meta.apply(meta.get-mixin(a)) using ($a) {
    @content($a);
  }
}

@mixin baz {
  $b: b;
  @include meta.apply(meta.get-mixin(b)) using ($a) {
    @content($a);
  }
}

a {
  $b: c;
  @include meta.apply(meta.get-mixin(baz)) using ($a) {
    a: $a;
  }
}

<===> scope/fall_through/output.css
a {
  a: x;
  b: x;
}
