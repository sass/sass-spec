<===> defined/input.scss
@use "sass:meta";
@use "other";
a {@include meta.apply(meta.get-mixin("a", $module: "other"), #abcdef)}

<===> defined/_other.scss
@use "sass:color";
@mixin a($color) {b: color.channel($color, 'red')}

<===> defined/output.css
a {
  b: 171;
}

<===>
================================================================================
<===> chosen_prefix/input.scss
@use "sass:meta";
@use "other" as a;
b {@include meta.apply(meta.get-mixin("a", $module: "a"), #abcdef)}

<===> chosen_prefix/_other.scss
@use "sass:color";
@mixin a($color) {c: color.channel($color, 'red')}

<===> chosen_prefix/output.css
b {
  c: 171;
}

<===>
================================================================================
<===> through_use/input.scss
@use "sass:meta";
@use "other" as *;
a {@include meta.apply(meta.get-mixin(add-two), 10)}

<===> through_use/other.scss
@mixin add-two($v) {b: $v + 2}

<===> through_use/output.css
a {
  b: 12;
}

<===>
================================================================================
<===> through_forward/bare/input.scss
@use "sass:meta";
@use "midstream" as *;
a {@include meta.apply(meta.get-mixin(c))}

<===> through_forward/bare/_midstream.scss
@forward "upstream";

<===> through_forward/bare/_upstream.scss
@mixin c() {b: c}

<===> through_forward/bare/output.css
a {
  b: c;
}

<===>
================================================================================
<===> through_forward/as/input.scss
@use "sass:meta";
@use "midstream" as *;
a {@include meta.apply(meta.get-mixin(c-d))}

<===> through_forward/as/_midstream.scss
@forward "upstream" as c-*;

<===> through_forward/as/_upstream.scss
@mixin d() {b: d}

<===> through_forward/as/output.css
a {
  b: d;
}

<===>
================================================================================
<===> through_forward/show/input.scss
@use "sass:meta";
@use "midstream" as *;
a {@include meta.apply(meta.get-mixin(c))}

<===> through_forward/show/_midstream.scss
@forward "upstream" show c;

<===> through_forward/show/_upstream.scss
@mixin c() {b: c}

<===> through_forward/show/output.css
a {
  b: c;
}

<===>
================================================================================
<===> through_forward/hide/input.scss
@use "sass:meta";
@use "midstream" as *;
a {@include meta.apply(meta.get-mixin(d))}

<===> through_forward/hide/_midstream.scss
@forward "upstream" hide c;

<===> through_forward/hide/_upstream.scss
@mixin d() {b: d}

<===> through_forward/hide/output.css
a {
  b: d;
}

<===>
================================================================================
<===> named/input.scss
@use "sass:meta";
@use "other";
a {@include meta.apply(meta.get-mixin($name: "a", $module: "other"), #abcdef)}

<===> named/_other.scss
@use "sass:color";
@mixin a($color) {b: color.channel($color, 'red')}

<===> named/output.css
a {
  b: 171;
}
