<===> stores_local_scope/input.scss
@use "sass:meta";
$add-two-mixin: null;

.scope {
  @mixin add-two($v) {b: $v + 2}

  // This mixin reference will still refer to this nested `add-two` mixin
  // even when it goes out of scope.
  $add-two-mixin: get-mixin(add-two) !global;
}

a {@include meta.apply($add-two-mixin, 10)}

<===> stores_local_scope/output.css
a {
  b: 12;
}

<===>
================================================================================
<===> captures_inner_scope/input.scss
@use "sass:meta";
@mixin add-two($v) {@error "Should not be called"}
.scope1 {
  @mixin add-two($v) {@error "Should not be called"}
  .scope2 {
    @mixin add-two($v) {@error "Should not be called"}
    .scope3 {
      @mixin add-two($v) {a: $v + 2}

      // Like a normal mixin call, get-mixin() will always use the
      // innermost definition of a mixin.
      @include meta.apply(get-mixin(add-two), 10);
    }
  }
}

<===> captures_inner_scope/output.css
.scope1 .scope2 .scope3 {
  a: 12;
}

<===>
================================================================================
<===> scope/mutated_global/input.scss
@use "sass:meta";
$a: x;

@mixin a {a: $a}

$ref: meta.get-mixin("a");

$a: y;

a {@include meta.apply($ref);}

<===> scope/mutated_global/output.css
a {
  a: y;
}

<===>
================================================================================
<===> scope/mutated_local/input.scss
@use "sass:meta";

a {
  $a: x;

  @mixin a {
    a: $a;
  }

  $ref: meta.get-mixin("a");

  $a: y;
  @include meta.apply($ref);
}

<===> scope/mutated_local/output.css
a {
  a: y;
}

