<===> in_input/before/input.scss
@use "sass:meta";

d {@extend a}
@include meta.load-css("other");

<===> in_input/before/_other.scss
a {b: c}

<===> in_input/before/output.css
a, d {
  b: c;
}

<===>
================================================================================
<===> in_input/after/input.scss
@use "sass:meta";
@include meta.load-css("other");

d {@extend a}

<===> in_input/after/_other.scss
a {b: c}

<===> in_input/after/output.css
a, d {
  b: c;
}

<===>
================================================================================
<===> in_other/README.md
Extensions in `_other.scss` don't affect syles in `input.scss`, both because
`input.scss` is downstream and because the CSS in `_other.scss` is fully
resolved before it's loaded.

<===>
================================================================================
<===> in_other/before/input.scss
@use "sass:meta";

a {b: c}
@include meta.load-css("other");

<===> in_other/before/_other.scss
d {@extend a !optional}

<===> in_other/before/output.css
a {
  b: c;
}

<===>
================================================================================
<===> in_other/after/input.scss
@use "sass:meta";

@include meta.load-css("other");
a {b: c}

<===> in_other/after/_other.scss
d {@extend a !optional}

<===> in_other/after/output.css
a {
  b: c;
}

<===>
================================================================================
<===> shared_cssless_midstream/input.scss
// Regression test for sass/sass#3322
@use 'sass:meta';
@use 'target';

@include meta.load-css('extender');

<===> shared_cssless_midstream/extender.scss
@use 'target';

.extender {
  @extend .target;
}

<===> shared_cssless_midstream/_target.scss
@use 'midstream';

.target {a: b}

<===> shared_cssless_midstream/_midstream.scss
@use 'upstream';

<===> shared_cssless_midstream/_upstream.scss
@c;

<===> shared_cssless_midstream/output.css
@c;
.target {
  a: b;
}

@c;
.target, .extender {
  a: b;
}

<===>
================================================================================
<===> nested/README.md
These are regression tests for https://github.com/sass/dart-sass/issues/2588.

<===>
================================================================================
<===> nested/without_use/input.scss
@use 'sass:meta';
.a {
  @include meta.load-css('upstream');
}

<===> nested/without_use/_upstream.scss
@mixin b { c: d }
@include b;

<===> nested/without_use/output.css
.a {
  c: d;
}

<===> nested/without_use/warning
DEPRECATION WARNING [import]: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.
More info and automated migrator: https://sass-lang.com/d/import
  ,
2 |   @import 'upstream';
  |           ^^^^^^^^^^
  '
    input.scss 2:11  root stylesheet

<===>
================================================================================
<===> nested/with_use/input.scss
@use 'sass:meta';
.a {
  @include meta.load-css('midstream');
}

<===> nested/with_use/_midstream.scss
@use 'upstream';
@mixin b { c: d }
@include b;

<===> nested/with_use/_upstream.scss
// Intentionally empty.

<===> nested/with_use/output.css
.a {
  c: d;
}

<===> nested/with_use/warning
DEPRECATION WARNING [import]: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.
More info and automated migrator: https://sass-lang.com/d/import
  ,
2 |   @import 'upstream';
  |           ^^^^^^^^^^
  '
    input.scss 2:11  root stylesheet
