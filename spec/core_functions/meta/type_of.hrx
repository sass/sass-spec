<===> boolean/true/input.scss
@use "sass:meta";
a {b: meta.type-of(true)}

<===> boolean/true/output.css
a {
  b: bool;
}

<===>
================================================================================
<===> boolean/false/input.scss
@use "sass:meta";
a {b: meta.type-of(false)}

<===> boolean/false/output.css
a {
  b: bool;
}

<===>
================================================================================
<===> color/input.scss
@use "sass:meta";
a {b: meta.type-of(red)}

<===> color/output.css
a {
  b: color;
}

<===>
================================================================================
<===> list/empty/input.scss
@use "sass:meta";
a {b: meta.type-of(())}

<===> list/empty/output.css
a {
  b: list;
}

<===>
================================================================================
<===> list/non_empty/input.scss
@use "sass:meta";
a {b: meta.type-of(1 2 3)}

<===> list/non_empty/output.css
a {
  b: list;
}

<===>
================================================================================
<===> map/empty/input.scss
@use "sass:map";
@use "sass:meta";
a {b: meta.type-of(map.remove((c: d), c))}

<===> map/empty/output.css
a {
  b: map;
}

<===>
================================================================================
<===> map/non_empty/input.scss
@use "sass:meta";
a {b: meta.type-of((c: d))}

<===> map/non_empty/output.css
a {
  b: map;
}

<===>
================================================================================
<===> null/input.scss
@use "sass:meta";
a {b: meta.type-of(null)}

<===> null/output.css
a {
  b: null;
}

<===>
================================================================================
<===> number/unitless/input.scss
@use "sass:meta";
a {b: meta.type-of(1)}

<===> number/unitless/output.css
a {
  b: number;
}

<===>
================================================================================
<===> number/unit/input.scss
@use "sass:meta";
a {b: meta.type-of(1.5px * 3.4em)}

<===> number/unit/output.css
a {
  b: number;
}

<===>
================================================================================
<===> function/input.scss
@use "sass:meta";
a {b: meta.type-of(meta.get-function("type-of", $module: "meta"))}

<===> function/output.css
a {
  b: function;
}

<===>
================================================================================
<===> string/quoted/input.scss
@use "sass:meta";
a {b: meta.type-of("c")}

<===> string/quoted/output.css
a {
  b: string;
}

<===>
================================================================================
<===> string/unquoted/input.scss
@use "sass:meta";
a {b: meta.type-of(c)}

<===> string/unquoted/output.css
a {
  b: string;
}

<===>
================================================================================
<===> arglist/input.scss
@use "sass:meta";
@function type-of-arglist($args...) {
  @return meta.type-of($args);
}

a {b: type-of-arglist()}

<===> arglist/output.css
a {
  b: arglist;
}

<===>
================================================================================
<===> calculation/simplified/input.scss
@use "sass:meta";
a {b: meta.type-of(calc(1px))}

<===> calculation/simplified/output.css
a {
  b: number;
}

<===>
================================================================================
<===> calculation/preserved/calc/input.scss
@use "sass:meta";
a {b: meta.type-of(calc(var(--c)))}

<===> calculation/preserved/calc/output.css
a {
  b: calculation;
}

<===>
================================================================================
<===> calculation/preserved/clamp/input.scss
@use "sass:meta";
a {b: meta.type-of(clamp(1%, 1px, 2px))}

<===> calculation/preserved/clamp/output.css
a {
  b: calculation;
}

<===>
================================================================================
<===> mixin/user_defined/input.scss
@use "sass:meta";
@mixin a() {}
a {b: meta.type-of(meta.get-mixin(a))}

<===> mixin/user_defined/output.css
a {
  b: mixin;
}

<===>
================================================================================
<===> mixin/builtin/input.scss
@use "sass:meta";
a {b: meta.type-of(meta.get-mixin(load-css, meta))}

<===> mixin/builtin/output.css
a {
  b: mixin;
}

<===>
================================================================================
<===> named/input.scss
@use "sass:meta";
a {b: meta.type-of($value: c)}

<===> named/output.css
a {
  b: string;
}

<===>
================================================================================
<===> error/too_few_args/input.scss
@use "sass:meta";
a {b: meta.type-of()}

<===> error/too_few_args/error
Error: Missing argument $value.
  ,--> input.scss
2 | a {b: meta.type-of()}
  |       ^^^^^^^^^^^^^^ invocation
  '
  ,--> sass:meta
1 | @function type-of($value) {
  |           =============== declaration
  '
  input.scss 2:7  root stylesheet

<===>
================================================================================
<===> error/too_many_args/input.scss
@use "sass:meta";
a {b: meta.type-of(1, 2)}

<===> error/too_many_args/error
Error: Only 1 argument allowed, but 2 were passed.
  ,--> input.scss
2 | a {b: meta.type-of(1, 2)}
  |       ^^^^^^^^^^^^^^^^^^ invocation
  '
  ,--> sass:meta
1 | @function type-of($value) {
  |           =============== declaration
  '
  input.scss 2:7  root stylesheet
