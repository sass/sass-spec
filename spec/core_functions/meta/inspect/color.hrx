<===> literal/README.md
When colors are written literally by the user, rather than being generated by a
function, inspect() should return them in the same format the user wrote them.

<===>
================================================================================
<===> literal/short_hex/input.scss
$result: inspect(#00f);
a {
  value: $result;
  type: type-of($result);
}

<===> literal/short_hex/output.css
a {
  value: #00f;
  type: string;
}

<===>
================================================================================
<===> literal/long_hex/input.scss
$result: inspect(#0000ff);
a {
  value: $result;
  type: type-of($result);
}

<===> literal/long_hex/output.css
a {
  value: #0000ff;
  type: string;
}

<===>
================================================================================
<===> literal/named/input.scss
$result: inspect(blue);
a {
  value: $result;
  type: type-of($result);
}

<===> literal/named/output.css
a {
  value: blue;
  type: string;
}

<===>
================================================================================
<===> literal/transparent/input.scss
$result: inspect(transparent);
a {
  value: $result;
  type: type-of($result);
}

<===> literal/transparent/output.css
a {
  value: transparent;
  type: string;
}

<===>
================================================================================
<===> generated/README.md
A color that's generated from a function should be returned as rgba() if its
alpha channel is anything other than 1, or the color name if it has one, or else
the hex code.

<===> generated/_utils.scss
/// Returns a copy of `$color` that doesn't have color-literal metadata
/// associated with it.
@function generated-color($color) {
  // This doesn't change the value of `$color` at all, but it does construct a
  // new object.
  @return scale-color($color, $blue: 0%);
}

<===>
================================================================================
<===> generated/alpha/input.scss
$result: inspect(rgba(1, 2, 3, 0.4));
a {
  value: $result;
  type: type-of($result);
}

<===> generated/alpha/output.css
a {
  value: rgba(1, 2, 3, 0.4);
  type: string;
}

<===>
================================================================================
<===> generated/transparent/input.scss
@import "../utils";
$result: inspect(generated-color(transparent));
a {
  value: $result;
  type: type-of($result);
}

<===> generated/transparent/output.css
a {
  value: rgba(0, 0, 0, 0);
  type: string;
}

<===>
================================================================================
<===> generated/named/input.scss
@import "../utils";
$result: inspect(generated-color(#00f));
a {
  value: $result;
  type: type-of($result);
}

<===> generated/named/output.css
a {
  value: blue;
  type: string;
}

<===>
================================================================================
<===> generated/short_hex/input.scss
@import "../utils";
$result: inspect(generated-color(#abc));
a {
  value: $result;
  type: type-of($result);
}

<===> generated/short_hex/output.css
a {
  value: #aabbcc;
  type: string;
}

<===>
================================================================================
<===> generated/long_hex/input.scss
@import "../utils";
$result: inspect(generated-color(#abcdef));
a {
  value: $result;
  type: type-of($result);
}

<===> generated/long_hex/output.css
a {
  value: #abcdef;
  type: string;
}
