<===> README.md
Most of the same behavior tested for `calc()` applies to `max()`, but for
terseness' sake isn't tested explicitly.

<===>
================================================================================
<===> error/syntax/no_args/input.scss
a {b: max()}

<===> error/syntax/no_args/error
Error: Missing argument.
  ,
1 | a {b: max()}
  |       ^^^^^
  '
  input.scss 1:7  root stylesheet

<===>
================================================================================
<===> error/syntax/invalid_arg/input.scss
a {b: max($)}

<===> error/syntax/invalid_arg/error
Error: Expected identifier.
  ,
1 | a {b: max($)}
  |            ^
  '
  input.scss 1:12  root stylesheet

<===>
================================================================================
<===> error/known_incompatible/first/input.scss
a {b: max(1s, 2px)}

<===> error/known_incompatible/first/error
Error: 1s and 2px are incompatible.
  ,
1 | a {b: max(1s, 2px)}
  |           ^^ 1s
  |               === 2px
  '
  input.scss 1:11  root stylesheet

<===>
================================================================================
<===> error/known_incompatible/second/input.scss
a {b: max(1px, 2s)}

<===> error/known_incompatible/second/error
Error: 1px and 2s are incompatible.
  ,
1 | a {b: max(1px, 2s)}
  |           ^^^ 1px
  |                == 2s
  '
  input.scss 1:11  root stylesheet

<===>
================================================================================
<===> error/known_incompatible/third/input.scss
a {b: max(1px, 2px, 3s)}

<===> error/known_incompatible/third/error
Error: 1px and 3s are incompatible.
  ,
1 | a {b: max(1px, 2px, 3s)}
  |           ^^^ 1px
  |                     == 3s
  '
  input.scss 1:11  root stylesheet

<===>
================================================================================
<===> error/potentially_incompatible_before_unitless/input.scss
a {b: max(1c, 2d, 3)}

<===> error/potentially_incompatible_before_unitless/error
Error: 1c and 3 are incompatible.
  ,
1 | a {b: max(1c, 2d, 3)}
  |           ^^ 1c
  |                   = 3
  '
  input.scss 1:11  root stylesheet

<===>
================================================================================
<===> error/unitless_and_real/in_calc/input.scss
a {b: max(calc(1px + 2))}

<===> error/unitless_and_real/in_calc/error
Error: 1px and 2 are incompatible.
  ,
1 | a {b: max(calc(1px + 2))}
  |                ^^^^^^^
  '
  input.scss 1:16  root stylesheet

<===>
================================================================================
<===> error/complex_unit/input.scss
a {b: max(1px*1px, 2%*2%)}

<===> error/complex_unit/error
Error: Number calc(1px * 1px) isn't compatible with CSS calculations.
  ,
1 | a {b: max(1px*1px, 2%*2%)}
  |           ^^^^^^^
  '
  input.scss 1:11  root stylesheet

<===>
================================================================================
<===> extra_whitespace/number/input.scss
a {b: max( 1px )}

<===> extra_whitespace/number/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> extra_whitespace/min_in_max/input.scss
// Regression test for sass/dart-sass#1444
a {b: max( min( 1px ) )}

<===> extra_whitespace/min_in_max/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> simplified/only/input.scss
a {b: max(1px)}

<===> simplified/only/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> simplified/first/input.scss
a {b: max(1px, 0px)}

<===> simplified/first/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> simplified/second/input.scss
a {b: max(0.5px, 2px)}

<===> simplified/second/output.css
a {
  b: 2px;
}

<===>
================================================================================
<===> simplified/third/input.scss
a {b: max(1px, 2.5px, 2.9px)}

<===> simplified/third/output.css
a {
  b: 2.9px;
}

<===>
================================================================================
<===> simplified/compatible_units/input.scss
a {b: max(1px, 1in, 1cm)}

<===> simplified/compatible_units/output.css
a {
  b: 1in;
}

<===>
================================================================================
<===> simplified/unitless_and_real/input.scss
a {b: max(1px, 2.5, 0.9px)}

<===> simplified/unitless_and_real/output.css
a {
  b: 2.5;
}

<===>
================================================================================
<===> simplified/unitless_between_potentially_incompatible/input.scss
a {b: max(1d, 2, 3e)}

<===> simplified/unitless_between_potentially_incompatible/output.css
a {
  b: 3e;
}

<===>
================================================================================
<===> simplified/operation/unitless_and_real/input.scss
a {b: max(1px, 2.5 + 0.9px)}

<===> simplified/operation/unitless_and_real/output.css
a {
  b: 3.4px;
}

<===> simplified/operation/unitless_and_real/warning
DEPRECATION WARNING: In future versions of Sass, max() will be interpreted as the CSS max() calculation. This doesn't allow unitless numbers to be mixed with numbers with units. If you want to use the Sass function, call math.max() instead.

See https://sass-lang.com/d/import

  ,
1 | a {b: max(1px, 2.5 + 0.9px)}
  |                ^^^^^^^^^^^
  '
    input.scss 1:16  root stylesheet

<===>
================================================================================
<===> preserved/math/first/input.scss
a {b: max(1% + 1px, 2px)}

<===> preserved/math/first/output.css
a {
  b: max(1% + 1px, 2px);
}

<===>
================================================================================
<===> preserved/math/second/input.scss
a {b: max(1px, 1% + 2px)}

<===> preserved/math/second/output.css
a {
  b: max(1px, 1% + 2px);
}

<===>
================================================================================
<===> preserved/math/third/input.scss
a {b: max(1px, 2px, 1% + 3px)}

<===> preserved/math/third/output.css
a {
  b: max(1px, 2px, 1% + 3px);
}

<===>
================================================================================
<===> preserved/unit/first/input.scss
a {b: max(1%, 2px)}

<===> preserved/unit/first/output.css
a {
  b: max(1%, 2px);
}

<===>
================================================================================
<===> preserved/unit/second/input.scss
a {b: max(1px, 2%)}

<===> preserved/unit/second/output.css
a {
  b: max(1px, 2%);
}

<===>
================================================================================
<===> preserved/unit/third/input.scss
a {b: max(1px, 2px, 3%)}

<===> preserved/unit/third/output.css
a {
  b: max(1px, 2px, 3%);
}

<===>
================================================================================
<===> preserved/variable/input.scss
$a: 1%;
b {c: max($a, 1px)}

<===> preserved/variable/output.css
b {
  c: max(1%, 1px);
}

<===>
================================================================================
<===> preserved/operation/unitless_and_real/plus/input.scss
a {b: max(1%, 2.5 + 0.9px)}

<===> preserved/operation/unitless_and_real/plus/output.css
a {
  b: max(1%, 3.4px);
}

<===> preserved/operation/unitless_and_real/plus/warning
DEPRECATION WARNING: In future versions of Sass, max() will be interpreted as the CSS max() calculation. This doesn't allow unitless numbers to be mixed with numbers with units. If you want to use the Sass function, call math.max() instead.

See https://sass-lang.com/d/import

  ,
1 | a {b: max(1%, 2.5 + 0.9px)}
  |               ^^^^^^^^^^^
  '
    input.scss 1:15  root stylesheet

<===>
================================================================================
<===> preserved/operation/unitless_and_real/minus/input.scss
a {b: max(1%, 2.5 - 0.9px)}

<===> preserved/operation/unitless_and_real/minus/output.css
a {
  b: max(1%, 1.6px);
}

<===> preserved/operation/unitless_and_real/minus/warning
DEPRECATION WARNING: In future versions of Sass, max() will be interpreted as the CSS max() calculation. This doesn't allow unitless numbers to be mixed with numbers with units. If you want to use the Sass function, call math.max() instead.

See https://sass-lang.com/d/import

  ,
1 | a {b: max(1%, 2.5 - 0.9px)}
  |               ^^^^^^^^^^^
  '
    input.scss 1:15  root stylesheet

<===>
================================================================================
<===> preserved/operation/unitless_and_real/in_calc/input.scss
a {b: calc(max(1%, 2.5 + 0.9px))}

<===> preserved/operation/unitless_and_real/in_calc/output.css
a {
  b: max(1%, 3.4px);
}

<===> preserved/operation/unitless_and_real/in_calc/warning
DEPRECATION WARNING: In future versions of Sass, max() will be interpreted as the CSS max() calculation. This doesn't allow unitless numbers to be mixed with numbers with units. If you want to use the Sass function, call math.max() instead.

See https://sass-lang.com/d/import

  ,
1 | a {b: calc(max(1%, 2.5 + 0.9px))}
  |                    ^^^^^^^^^^^
  '
    input.scss 1:20  root stylesheet

<===>
================================================================================
<===> math/slash_as_division/input.scss
b { 
  a: 2px / max(1.5);
}

<===> math/slash_as_division/output.css
b {
  a: 1.3333333333px;
}

<===> math/slash_as_division/warning
DEPRECATION WARNING: Using / for division outside of calc() is deprecated and will be removed in Dart Sass 2.0.0.
Recommendation: math.div(2px, max(1.5)) or calc(2px / max(1.5))
More info and automated migrator: https://sass-lang.com/d/slash-div
  ,
2 |   a: 2px / max(1.5);
  |      ^^^^^^^^^^^^^^
  '
    input.scss 2:6  root stylesheet

<===>
================================================================================
<===> case_insensitive/input.scss
a {b: mAx(1px)}

<===> case_insensitive/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> overridden/input.scss
@function max($arg1, $arg2) {@return $arg1}
a {b: max(1, 2)}

<===> overridden/output.css
a {
  b: 1;
}
