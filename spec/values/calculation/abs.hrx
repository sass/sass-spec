<===> README.md
Most of the same behavior tested for `calc()` applies to `abs()`, but for
terseness' sake isn't tested explicitly.

<===>
================================================================================
<===> zero/input.scss
a {b: abs(0)}

<===> zero/output.css
a {
  b: 0;
}

<===>
================================================================================
<===> positive/input.scss
a {b: abs(1)}

<===> positive/output.css
a {
  b: 1;
}

<===>
================================================================================
<===> negative/input.scss
a {b: abs(-5.6)}

<===> negative/output.css
a {
  b: 5.6;
}

<===>
================================================================================
<===> simplification/input.scss
a {
  b: abs(1px + 2px - var(--c))
}

<===> simplification/output.css
a {
  b: abs(3px - var(--c));
}

<===>
================================================================================
<===> preserves_units/input.scss
a {b: abs(-7px / 4em) * 1em}

<===> preserves_units/output.css
a {
  b: 1.75px;
}

<===>
================================================================================
<===> preserves_single_unit/input.scss
a {b: abs(1 + 1px)}

<===> preserves_single_unit/output.css
a {
  b: 2px;
}

<===> preserves_single_unit/warning
DEPRECATION WARNING: In future versions of Sass, abs() will be interpreted as the CSS abs() calculation. This doesn't allow unitless numbers to be mixed with numbers with units. If you want to use the Sass function, call math.abs() instead.

See https://sass-lang.com/d/import

  ,
1 | a {b: abs(1 + 1px)}
  |           ^^^^^^^
  '
    input.scss 1:11  root stylesheet

<===>
================================================================================
<===> sass_script/input.scss
a {b: abs($number: -3)}

<===> sass_script/output.css
a {
  b: 3;
}

<===> sass_script/warning
DEPRECATION WARNING: Global built-in functions are deprecated and will be removed in Dart Sass 3.0.0.
Use math.abs instead.

More info and automated migrator: https://sass-lang.com/d/import

  ,
1 | a {b: abs($number: -3)}
  |       ^^^^^^^^^^^^^^^^
  '
    input.scss 1:7  root stylesheet

<===>
================================================================================
<===> percentage_warning/input.scss
a {b: abs(-7.5%)}

<===> percentage_warning/output.css
a {
  b: 7.5%;
}

<===> percentage_warning/warning
DEPRECATION WARNING: Passing percentage units to the global abs() function is deprecated.
In the future, this will emit a CSS abs() function to be resolved by the browser.
To preserve current behavior: math.abs(-7.5%)
To emit a CSS abs() now: abs(#{-7.5%})
More info: https://sass-lang.com/d/abs-percent
  ,
1 | a {b: abs(-7.5%)}
  |       ^^^^^^^^^^
  '
    input.scss 1:7  root stylesheet

<===>
================================================================================
<===> math/slash_as_division/input.scss
b {
  a: 2px / abs(1.5);
}

<===> math/slash_as_division/output.css
b {
  a: 1.3333333333px;
}

<===> math/slash_as_division/warning
DEPRECATION WARNING: Using / for division outside of calc() is deprecated and will be removed in Dart Sass 2.0.0.

Recommendation: math.div(2px, abs(1.5)) or calc(2px / abs(1.5))

More info and automated migrator: https://sass-lang.com/d/slash-div

  ,
2 |   a: 2px / abs(1.5);
  |      ^^^^^^^^^^^^^^
  '
    input.scss 2:6  root stylesheet

<===>
================================================================================
<===> case_insensitive/input.scss
a {b: AbS(-2)}

<===> case_insensitive/output.css
a {
  b: 2;
}

<===>
================================================================================
<===> overridden/input.scss
@function abs($arg) {@return $arg}
a {b: abs(-2)}

<===> overridden/output.css
a {
  b: -2;
}

<===>
================================================================================
<===> error/sass_script_and_variable/input.scss
a {b: abs($number: var(--c))}

<===> error/sass_script_and_variable/error
Error: $number: var(--c) is not a number.
  ,
1 | a {b: abs($number: var(--c))}
  |       ^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 1:7  root stylesheet

<===>
================================================================================
<===> error/type/input.scss
a {b: abs("0")}

<===> error/type/error
Error: $number: "0" is not a number.
  ,
1 | a {b: abs("0")}
  |       ^^^^^^^^
  '
  input.scss 1:7  root stylesheet

<===>
================================================================================
<===> error/too_few_args/input.scss
a {b: abs()}

<===> error/too_few_args/error
Error: Missing argument.
  ,
1 | a {b: abs()}
  |       ^^^^^
  '
  input.scss 1:7  root stylesheet

<===>
================================================================================
<===> error/too_many_args/input.scss
a {b: abs(1, 2)}

<===> error/too_many_args/error
Error: Only 1 argument allowed, but 2 were passed.
  ,
1 | a {b: abs(1, 2)}
  |       ^^^^^^^^^
  '
  input.scss 1:7  root stylesheet

<===>
================================================================================
<===> error/syntax/invalid_arg/input.scss
a {b: abs($)}

<===> error/syntax/invalid_arg/error
Error: Expected identifier.
  ,
1 | a {b: abs($)}
  |            ^
  '
  input.scss 1:12  root stylesheet
