<===> syntax/extra_whitespace/number/input.scss
a {b: calc( 1 )}

<===> syntax/extra_whitespace/number/output.css
a {
  b: 1;
}

<===>
================================================================================
<===> syntax/extra_whitespace/parens/input.scss
a {b: calc( ( 1 ) )}

<===> syntax/extra_whitespace/parens/output.css
a {
  b: 1;
}

<===>
================================================================================
<===> syntax/extra_whitespace/parenthesized_var/input.scss
a {b: calc( ( var(--c) ) )}

<===> syntax/extra_whitespace/parenthesized_var/output.css
a {
  b: calc((var(--c)));
}

<===>
================================================================================
<===> number/integer/input.scss
a {b: calc(1px)}

<===> number/integer/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> number/leading_plus/input.scss
a {b: calc(+1px)}

<===> number/leading_plus/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> number/leading_minus/input.scss
a {b: calc(-1px)}

<===> number/leading_minus/output.css
a {
  b: -1px;
}

<===>
================================================================================
<===> number/unitless/input.scss
a {b: calc(1)}

<===> number/unitless/output.css
a {
  b: 1;
}

<===>
================================================================================
<===> number/exponent/input.scss
a {b: calc(1e2px)}

<===> number/exponent/output.css
a {
  b: 100px;
}

<===>
================================================================================
<===> number/decimal/leading_digit/input.scss
a {b: calc(1.2px)}

<===> number/decimal/leading_digit/output.css
a {
  b: 1.2px;
}

<===>
================================================================================
<===> number/decimal/leading_dot/input.scss
a {b: calc(.2px)}

<===> number/decimal/leading_dot/output.css
a {
  b: 0.2px;
}

<===>
================================================================================
<===> variable/number/simple_unit/input.scss
$a: 1px;
b {c: calc($a)}

<===> variable/number/simple_unit/output.css
b {
  c: 1px;
}

<===>
================================================================================
<===> variable/number/complex_unit/input.scss
@use "sass:math";
$a: math.div(1px*1s, 1rad);
b {c: math.div(calc($a) * 2rad, 2s)}

<===> variable/number/complex_unit/output.css
b {
  c: 1px;
}

<===>
================================================================================
<===> variable/unquoted_string/input.scss
$a: foobar;
b {c: calc($a)}

<===> variable/unquoted_string/output.css
b {
  c: calc(foobar);
}

<===>
================================================================================
<===> variable/calculation/input.scss
$a: calc(1px + 1%);
b {c: calc($a)}

<===> variable/calculation/output.css
b {
  c: calc(1px + 1%);
}

<===>
================================================================================
<===> variable/namespace/input.scss
@use "sass:math";
a {b: calc(math.$pi)}

<===> variable/namespace/output.css
a {
  b: 3.1415926536;
}

<===>
================================================================================
<===> variable/not_parsed_as_interpolation/README.md
Regression tests for https://github.com/sass/dart-sass/issues/1499.

<===>
================================================================================
<===> variable/not_parsed_as_interpolation/followed_by_parenthesized_interp/input.scss
$a: 1;
b {
  c: calc($a);
  $_: ("#{''}");
}

<===> variable/not_parsed_as_interpolation/followed_by_parenthesized_interp/output.css
b {
  c: 1;
}

<===>
================================================================================
<===> variable/not_parsed_as_interpolation/parentheses_in_string/input.scss
@function a($arg) {@return 1}

$b: 2;
c {
  // A naive parser might check for closing parentheses regardless of string
  // context when looking for interpolation in a calc.
  d: calc($b + a(")#{''}"));
}

<===> variable/not_parsed_as_interpolation/parentheses_in_string/output.css
c {
  d: 3;
}

<===>
================================================================================
<===> variable/not_parsed_as_interpolation/in_comment/input.scss
$a: 1;
b {
  // A naive parser might check for interpolation in a comment.
  c: calc($a /* #{''} */);
}

<===> variable/not_parsed_as_interpolation/in_comment/output.css
b {
  c: 1;
}

<===>
================================================================================
<===> function/css/input.scss
a {b: calc(c())}

<===> function/css/output.css
a {
  b: calc(c());
}

<===>
================================================================================
<===> function/sass/global/input.scss
@function a() {@return 1px}

b {c: calc(a())}

<===> function/sass/global/output.css
b {
  c: 1px;
}

<===>
================================================================================
<===> function/sass/namespace/input.scss
@use "sass:math";
b {c: calc(math.round(2.3))}

<===> function/sass/namespace/output.css
b {
  c: 2;
}

<===>
================================================================================
<===> function/if/input.scss
b {c: calc(if(true, 1, $undefined))}

<===> function/if/output.css
b {
  c: 1;
}

<===>
================================================================================
<===> function/min/input.scss
b {c: calc(min(1 2 3...))}

<===> function/min/output.css
b {
  c: 1;
}

<===> function/min/warning
DEPRECATION WARNING: Global built-in functions are deprecated and will be removed in Dart Sass 3.0.0.
Use math.min instead.

More info and automated migrator: https://sass-lang.com/d/import

  ,
1 | b {c: calc(min(1 2 3...))}
  |            ^^^^^^^^^^^^^
  '
    input.scss 1:12  root stylesheet

<===>
================================================================================
<===> function/max/input.scss
b {c: calc(max(1 2 3...))}

<===> function/max/output.css
b {
  c: 3;
}

<===> function/max/warning
DEPRECATION WARNING: Global built-in functions are deprecated and will be removed in Dart Sass 3.0.0.
Use math.max instead.

More info and automated migrator: https://sass-lang.com/d/import

  ,
1 | b {c: calc(max(1 2 3...))}
  |            ^^^^^^^^^^^^^
  '
    input.scss 1:12  root stylesheet

<===>
================================================================================
<===> var/bare/input.scss
a {b: calc(var(--c))}

<===> var/bare/output.css
a {
  b: calc(var(--c));
}

<===>
================================================================================
<===> calculation/calc/simplified/input.scss
a {b: calc(calc(1px))}

<===> calculation/calc/simplified/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> calculation/calc/preserved/input.scss
a {b: calc(calc(1px + 1%))}

<===> calculation/calc/preserved/output.css
a {
  b: calc(1px + 1%);
}

<===>
================================================================================
<===> calculation/clamp/simplified/input.scss
a {b: calc(clamp(1px, 2px, 3px))}

<===> calculation/clamp/simplified/output.css
a {
  b: 2px;
}

<===>
================================================================================
<===> calculation/clamp/preserved/input.scss
a {b: calc(clamp(1%, 2px, 3%))}

<===> calculation/clamp/preserved/output.css
a {
  b: clamp(1%, 2px, 3%);
}

<===>
================================================================================
<===> calculation/min/simplified/input.scss
a {b: calc(min(1px, 2px))}

<===> calculation/min/simplified/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> calculation/min/preserved/input.scss
a {b: calc(min(1%, 2px))}

<===> calculation/min/preserved/output.css
a {
  b: min(1%, 2px);
}

<===>
================================================================================
<===> calculation/max/simplified/input.scss
a {b: calc(max(1px, 2px))}

<===> calculation/max/simplified/output.css
a {
  b: 2px;
}

<===>
================================================================================
<===> calculation/max/preserved/input.scss
a {b: calc(max(1%, 2px))}

<===> calculation/max/preserved/output.css
a {
  b: max(1%, 2px);
}

<===>
================================================================================
<===> interpolation/number/input.scss
// Although interpolation may return a value that looks like a valid `calc()`,
// it's always treated as an unquoted string.
a {b: calc(#{1px + 2px})}

<===> interpolation/number/output.css
a {
  b: calc(3px);
}

<===>
================================================================================
<===> interpolation/parens/input.scss
// Interpolation is isolated to a single parenthesized context, so the
// parentheses themselves are stripped off.
a {b: calc((#{1px + 2px}))}

<===> interpolation/parens/output.css
a {
  b: calc((3px));
}

<===>
================================================================================
<===> interpolation/nested/input.scss
a {b: calc(calc(#{c}))}

<===> interpolation/nested/output.css
a {
  b: calc(c);
}

<===>
================================================================================
<===> extra_whitespace/input.scss
a {b: calc( 1px )}

<===> extra_whitespace/output.css
a {
  b: 1px;
}

<===>
================================================================================
<===> case_insensitive/input.scss
a {b: CaLc(1px)}

<===> case_insensitive/output.css
a {
  b: 1px;
}
