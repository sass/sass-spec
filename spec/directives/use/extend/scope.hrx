<===> README.md
All tests in this directory use `!optional` extends to test extensions that
don't have matches. Each test should have a counterpart in error/extend/ that
tests the same thing but without `!optional` to verify that it properly produces
an error message.

<===>
================================================================================
<===> sibling/input.scss
@use "left";
@use "right";

<===> sibling/_left.scss
left-extendee {in: left}
left-extender {@extend right-extendee !optional}

<===> sibling/_right.scss
right-extendee {in: right}
right-extender {@extend left-extendee !optional}

<===> sibling/output.css
left-extendee {
  in: left;
}

right-extendee {
  in: right;
}

<===>
================================================================================
<===> downstream/input.scss
@use "other";

in-input {x: y}

<===> downstream/_other.scss
in-other {@extend in-input !optional}

<===> downstream/output.css
in-input {
  x: y;
}

<===>
================================================================================
<===> private/input.scss
@use "other";

in-input {@extend %-in-other !optional}

<===> private/_other.scss
%-in-other {x: y}

in-other {@extend %-in-other}

<===> private/output.css
in-other {
  x: y;
}

<===>
================================================================================
<===> diamond/input.scss
// Even though left-extendee and right-extendee both end up in the style rule
// defined in _shared.scss, they aren't extended by the other file because those
// files don't use one another.
@use "left";
@use "right";

<===> diamond/_left.scss
@use "shared";

left-extendee {@extend in-shared}
left-extender {@extend right-extendee !optional}

<===> diamond/_right.scss
@use "shared";

right-extendee {@extend in-shared}
right-extender {@extend left-extendee !optional}

<===> diamond/_shared.scss
in-shared {x: y}

<===> diamond/output.css
in-shared, right-extendee, left-extendee {
  x: y;
}

<===>
================================================================================
<===> use_into_use_and_import_into_use/input.scss
@use "used";
@import "imported";

<===> use_into_use_and_import_into_use/_used.scss
@use "shared";

in-used {@extend shared}

<===> use_into_use_and_import_into_use/_imported.scss
@use "shared";

in-imported {@extend shared}

<===> use_into_use_and_import_into_use/_shared.scss
// When this module is used by _imported.scss, its CSS is copied. The used
// @extend only applies to the original, while the imported @extend applies to
// both (since the imported extend is downstream of the used module).

shared {x: y}

<===> use_into_use_and_import_into_use/output.css
shared, in-used, in-imported {
  x: y;
}

shared, in-imported {
  x: y;
}

<===> use_into_use_and_import_into_use/warning
DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
2 | @import "imported";
  |         ^^^^^^^^^^
  '
    input.scss 2:9  root stylesheet

<===>
================================================================================
<===> use_into_use_and_import_into_import/input.scss
@use "used";
@import "imported";

<===> use_into_use_and_import_into_import/_used.scss
@use "shared";

in-used {@extend shared}

<===> use_into_use_and_import_into_import/_imported.scss
@import "shared";

in-imported {@extend shared}

<===> use_into_use_and_import_into_import/_shared.scss
// When this module is used by _imported.scss, its CSS is copied. The used
// @extend only applies to the original, while the imported @extend applies to
// both (since the imported extend is downstream of the used module).
shared {x: y}

<===> use_into_use_and_import_into_import/output.css
shared, in-used, in-imported {
  x: y;
}

shared, in-imported {
  x: y;
}

<===> use_into_use_and_import_into_import/warning
DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
2 | @import "imported";
  |         ^^^^^^^^^^
  '
    input.scss 2:9  root stylesheet

DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
1 | @import "shared";
  |         ^^^^^^^^
  '
    _imported.scss 1:9  @import
    input.scss 2:9      root stylesheet

<===>
================================================================================
<===> use_into_use_and_use_into_import/input.scss
@use "user";
@use "importer";

<===> use_into_use_and_use_into_import/_user.scss
@use "shared";

in-user {@extend shared}

<===> use_into_use_and_use_into_import/_importer.scss
@import "shared";

in-importer {@extend shared}

<===> use_into_use_and_use_into_import/_shared.scss
// When this module is imported by _importer.scss, its CSS is copied. The
// imported @extend only applies to the copy, and the used @extend only applies
// to the original.
shared {x: y}

<===> use_into_use_and_use_into_import/output.css
shared, in-user {
  x: y;
}

shared, in-importer {
  x: y;
}

<===> use_into_use_and_use_into_import/warning
DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
1 | @import "shared";
  |         ^^^^^^^^
  '
    _importer.scss 1:9  @use
    input.scss 2:1      root stylesheet

<===>
================================================================================
<===> use_into_use_and_use_into_import_into_use/input.scss
@use "importer";
@use "used";

<===> use_into_use_and_use_into_import_into_use/_importer.scss
@import "imported";

<===> use_into_use_and_use_into_import_into_use/_imported.scss
@use "shared";

in-imported {@extend shared}

<===> use_into_use_and_use_into_import_into_use/_used.scss
@use "shared";

in-used {@extend shared}

<===> use_into_use_and_use_into_import_into_use/_shared.scss
// When this module is used by _imported.scss, its CSS is copied. The imported
// @extend only applies to the copy, and the used @extend only applies to the
// original.
shared {x: y}

<===> use_into_use_and_use_into_import_into_use/output.css
shared, in-imported {
  x: y;
}

shared, in-used {
  x: y;
}

<===> use_into_use_and_use_into_import_into_use/warning
DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
1 | @import "imported";
  |         ^^^^^^^^^^
  '
    _importer.scss 1:9  @use
    input.scss 1:1      root stylesheet

<===>
================================================================================
<===> use_and_import_into_diamond_extend/input.scss
@use "downstream";
@import "downstream";
@import "imported";

<===> use_and_import_into_diamond_extend/_downstream.scss
// Even though left-extendee and right-extendee both end up in the style rule
// defined in _shared.scss, they aren't extended by the other file because those
// files don't use one another. This is true even though they're imported, which
// eagerly resolves extensions.
@use "left";
@use "right";

<===> use_and_import_into_diamond_extend/_left.scss
@use "shared";

left-extendee {@extend in-shared}
left-extender {@extend right-extendee !optional}

<===> use_and_import_into_diamond_extend/_right.scss
@use "shared";

right-extendee {@extend in-shared}
right-extender {@extend left-extendee !optional}

<===> use_and_import_into_diamond_extend/_shared.scss
in-shared {x: y}

<===> use_and_import_into_diamond_extend/_imported.scss
@use "downstream";

<===> use_and_import_into_diamond_extend/output.css
in-shared, right-extendee, left-extendee {
  x: y;
}

in-shared, right-extendee, left-extendee {
  x: y;
}

in-shared, right-extendee, left-extendee {
  x: y;
}

<===> use_and_import_into_diamond_extend/warning
DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
2 | @import "downstream";
  |         ^^^^^^^^^^^^
  '
    input.scss 2:9  root stylesheet

DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
3 | @import "imported";
  |         ^^^^^^^^^^
  '
    input.scss 3:9  root stylesheet

<===>
================================================================================
<===> isolated_through_import/input.scss
@use "used-by-input";
@import "imported";

<===> isolated_through_import/_used-by-input.scss
@use "shared";

.in-used-by-input {@extend .in-shared}

<===> isolated_through_import/_imported.scss
@use "used-by-imported";

<===> isolated_through_import/_used-by-imported.scss
@use "shared";

.in-used-by-imported {@extend .in-shared}

<===> isolated_through_import/_shared.scss
// This should appear twice in the output: once when it's used directly, and
// once when it's used through @import (since @import copies its CSS). Each copy
// should be extended exactly once.
.in-shared {a: b}

<===> isolated_through_import/output.css
.in-shared, .in-used-by-input {
  a: b;
}

.in-shared, .in-used-by-imported {
  a: b;
}

<===> isolated_through_import/warning
DEPRECATION WARNING: Sass @import rules are deprecated and will be removed in Dart Sass 3.0.0.

More info and automated migrator: https://sass-lang.com/d/import

  ,
2 | @import "imported";
  |         ^^^^^^^^^^
  '
    input.scss 2:9  root stylesheet
